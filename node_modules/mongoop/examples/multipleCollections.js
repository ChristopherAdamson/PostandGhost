const express = require('express')
const app = express()

const mongoURI = "mongodb://localhost:27017/mongoopexample"
const db = require('mongoop')(mongoURI)

const fruitsSchema = {
	name: {
		type: String,
		index: {
			unique: true
		}
	}
}
const cheesesSchema = {
	name: {
		type: String,
		index: {
			unique: true
		}
	}
}
db.collections([
	{
		model: 'Fruits',
		schema: fruitsSchema,
		hooks: [
			[ 'pre', 'save', function (next) {
					this.name = this.name.toUpperCase()
					next()
				}
			]
		]
	},
	{
		model: 'Cheeses',
		schema: cheesesSchema,
		hooks: [
			[ 'pre', 'save', function (next) {
					this.name = this.name.toUpperCase()
					next()
				}
			]
		]
	}
])

const dbOpers = db['Fruits'].operations
const dbOpers2 = db['Cheeses'].operations
const port = 3000

app.get('/', (req, res) => {
	res.status(200).end('Welcom to fruits and cheeses database!')
})

app.get('/showfruit/:name', (req, res) => {
	dbOpers.read('findOne', { 'name': req.params.name }, (err, returnValue) => {
		if (err) return console.error(err)
		return res.end(returnValue.name)
	})
})

app.get('/showcheese/:name', (req, res) => {
	dbOpers2.read('findOne', { 'name': req.params.name }, (err, returnValue) => {
		if (err) return console.error(err)
		return res.end(returnValue.name)
	})
})

app.post('/newfruit/:name', (req, res) => {
	const newFruit = {
		name: req.params.name
	}
	dbOpers.create(newFruit, (err, returnValue) => {
		if (err) return console.error(err)
		return res.end(`Entry created: ${newFruit.name}`)
	})
})

app.post('/newcheese/:name', (req, res) => {
	const newCheese = {
		name: req.params.name
	}
	dbOpers2.create(newCheese, (err, returnValue) => {
		if (err) return console.error(err)
		return res.end(`Entry created: ${newCheese.name}`)
	})
})

app.listen(port, () => console.log(`Server listening on port ${port}.`))

