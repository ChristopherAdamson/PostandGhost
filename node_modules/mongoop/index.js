/*
 *  mongoop
 *  Copyright(c) 2017 Giles Aamoth
 *  MIT Licensed
*/
'use strict'

const mongoose = require('mongoose')

const sethooks = require('./lib/hooks')
const setplugins = require('./lib/plugins')
const operations = require('./lib/operations')

module.exports = mongoop

function mongoop(uri) {
  let connection = mongoose.connect(uri)

  // handle any errors while trying to connect to database
  let errorhandler = connection.connection.on('error', err => console.error(err))

  // object that will be returned by function
  let mongoopObject = {
    collections: collections
  }

  // add collections to mongoopObject
  function collections(options) {
    if (Array.isArray(options)) { // multiple collections
      options.forEach(e => {
        let query = setup(e)
        let opers = operations(query)
        init(e.model, opers)
      })
    }
    else if (!Array.isArray(options) && typeof options === 'object') { // a single collection
      let query = setup(options)
      let opers = operations(query)
      init(options.model, opers)
    }
  }

  // setup a collection
  function setup(collection) {
    let queryschema = null
    let query = null

    queryschema = new mongoose.Schema(collection.schema)
    
    if (collection.hooks && collection.hooks.length > 0) {
      queryschema = sethooks(queryschema, collection.hooks)
    }

    if (collection.plugins && collection.plugins.length > 0) {
      queryschema = setplugins(queryschema, collection.plugins)
    }

    query = connection.model(collection.model, queryschema)
    
    return query
  }

  // expose CRUD operations for a collection
  function init(model, operations) {
    mongoopObject[model] = {
      operations: operations
    }
  }

  return mongoopObject
}
